version: '3.9'

services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: unless-stopped
    stop_grace_period: 30s
    environment:
      MYSQL_ROOT_PASSWORD: example_root_password
      MYSQL_DATABASE: africa_vlp
      MYSQL_USER: africa_vlp_user
      MYSQL_PASSWORD: example_password
    ports:
      - '3306:3306'
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - backend
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 5
        window: 300s
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-pexample_root_password"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7
    container_name: redis
    restart: unless-stopped
    stop_grace_period: 10s
    ports:
      - '6379:6379'
    networks:
      - backend
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 300s
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  admin-backend:
    build:
      context: ./admin-backend
    container_name: admin-backend
    command: ["./start.sh"]
    restart: unless-stopped
    stop_grace_period: 30s
    env_file:
      - .env
    volumes:
      - ./admin-backend:/app
      - static_admin:/app/static
      - media_admin:/app/media
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
      - frontend
    ports:
      - '8000:8000'
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 180s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/live/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  celery-worker:
    build:
      context: ./admin-backend
    container_name: celery-worker
    command: >
      sh -c "
        echo 'Waiting for Redis to be ready...' &&
        while ! redis-cli -h redis -p 6379 ping > /dev/null 2>&1; do
          echo 'Redis not ready, waiting...'
          sleep 2
        done &&
        echo 'Starting Celery worker with enhanced configuration...' &&
        celery -A admin_backend worker 
          --loglevel=info 
          --concurrency=4 
          --max-tasks-per-child=1000 
          --prefetch-multiplier=1 
          --queues=default,email,media,reports,maintenance
          --hostname=worker@%h
      "
    env_file:
      - .env
    volumes:
      - ./admin-backend:/app
      - static_admin:/app/static
      - media_admin:/app/media
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      admin-backend:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "sh", "-c", "celery -A admin_backend inspect ping | grep -q 'pong' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  celery-beat:
    build:
      context: ./admin-backend
    container_name: celery-beat
    command: >
      sh -c "
        echo 'Waiting for Redis and database to be ready...' &&
        while ! redis-cli -h redis -p 6379 ping > /dev/null 2>&1; do
          echo 'Redis not ready, waiting...'
          sleep 2
        done &&
        python manage.py wait_for_db &&
        echo 'Starting Celery beat scheduler...' &&
        celery -A admin_backend beat 
          --loglevel=info 
          --scheduler django_celery_beat.schedulers:DatabaseScheduler
          --pidfile=/tmp/celerybeat.pid
      "
    env_file:
      - .env
    volumes:
      - ./admin-backend:/app
      - static_admin:/app/static
      - media_admin:/app/media
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
      admin-backend:
        condition: service_healthy
    networks:
      - backend
    restart: unless-stopped
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "sh", "-c", "test -f /tmp/celerybeat.pid && pgrep -f 'celery.*beat' || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 60s

  celery-flower:
    build:
      context: ./admin-backend
    container_name: celery-flower
    command: >
      sh -c "
        echo 'Waiting for Redis to be ready...' &&
        while ! redis-cli -h redis -p 6379 ping > /dev/null 2>&1; do
          echo 'Redis not ready, waiting...'
          sleep 2
        done &&
        echo 'Starting Flower monitoring...' &&
        celery -A admin_backend flower 
          --port=5555 
          --broker=redis://redis:6379/0
          --broker_api=redis://redis:6379/0
          --persistent=true
          --db=/app/flower.db
          --max_tasks=10000
      "
    env_file:
      - .env
    volumes:
      - ./admin-backend:/app
    depends_on:
      redis:
        condition: service_healthy
      celery-worker:
        condition: service_healthy
    networks:
      - backend
      - frontend
    ports:
      - '5555:5555'
    restart: unless-stopped
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "sh", "-c", "curl -f http://localhost:5555/api/workers || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  wellknown-backend:
    build:
      context: ./wellknown-backend
    container_name: wellknown-backend
    command: ["./start.sh"]
    restart: unless-stopped
    stop_grace_period: 30s
    env_file:
      - .env
    volumes:
      - ./wellknown-backend:/app
      - static_wellknown:/app/static
      - media_wellknown:/app/media
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
      - frontend
    ports:
      - '8001:8000'
    deploy:
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        window: 180s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/live/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  admin-frontend:
    build:
      context: ./admin-frontend
    container_name: admin-frontend
    restart: unless-stopped
    stop_grace_period: 15s
    env_file:
      - .env
    volumes:
      - ./admin-frontend:/app
    depends_on:
      admin-backend:
        condition: service_healthy
    networks:
      - frontend
    ports:
      - '3000:3000'
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  wellknown-frontend:
    build:
      context: ./wellknown-frontend
    container_name: wellknown-frontend
    restart: unless-stopped
    stop_grace_period: 15s
    env_file:
      - .env
    volumes:
      - ./wellknown-frontend:/app
    depends_on:
      wellknown-backend:
        condition: service_healthy
    networks:
      - frontend
    ports:
      - '3001:3000'
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  nginx:
    image: nginx:alpine
    container_name: nginx
    restart: unless-stopped
    stop_grace_period: 10s
    depends_on:
      admin-backend:
        condition: service_healthy
      wellknown-backend:
        condition: service_healthy
      admin-frontend:
        condition: service_healthy
      wellknown-frontend:
        condition: service_healthy
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - static_admin:/static/admin
      - media_admin:/media/admin
      - static_wellknown:/static/wellknown
      - media_wellknown:/media/wellknown
    ports:
      - '80:80'
      - '443:443'
    networks:
      - frontend
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
        window: 120s
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

volumes:
  mysql_data:
  static_admin:
  media_admin:
  static_wellknown:
  media_wellknown:

networks:
  backend:
  frontend: